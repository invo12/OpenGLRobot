glGenBuffers(1, &VBO) - genereaza buffer-ul si iti intoarce id-ul in VBO
glBindBuffer(GL_ARRAY_BUFFER, VBO) - spui ca VBO e de tipul GL_ARRAY_BUFFER
glBufferData(tip, dimensiune in bytes, array din care pui,mod utilizare) - pui date in buffer
	#modul poate fi: GL_STREAM_DRAW, data e setata odata si folosita de GPU de cateva ori
				 GL_STATIC_DRAW, data e setata odata si folosita de multe ori
				 GL_DYNAMIC_DRAW, data se schimba frecvent si e folosita de multe ori
glVertexAttribPointer(indexul atributului, nr de componente per atribut intre 1 si 4,tipul fiecarei componente,
					  normalizat de obicei GL_FALSE, stride adica nr de octeti pana la urmatorul atribut de acest fel,
					  offset-ul de la prima aparitie a atributului)
	#indexul e folosit la vertexShader cand specifici layout(location = index)
glEnableVertexAttribArray(index) - activeaza atributul configurat anterior
glDrawArrays(mod, primul index, numarul de vertexuri pe care vrei sa-l desenezi);
glDrawElements(mod, nr de vertex-uri de desenat, tipul de valori, offsetul indicilor);
	#se foloseste dupa ce ai pus glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	


int location = glGetUniformLocation(shaderProgram, "ourColor");	- identifici variabila uniforma cu numele ourColor
glUniform4f(location,1,2,3,4) - C nu suporta overloading si de aia numele e cu 4f in functie de ce vrei sa dai ca parametri
							  - se poate si cu fv (float vectors)



stbi_load(nume, width, height, nr de channel-uri, 0) - incarci textura
glTexImage2D(target/GL_TEXTURE_2D, levelul din mipmap 0 pt originala, formatul intern/RGB, lungimea, inaltimea
			 border care trb sa fie 0, formatul pixelilor/RGB, tipul pixelilor, pointer la imagine in memorie);
glGenerateMipMap(GL_TEXTURE_2D);
glActiveTexture(GL_TEXTURE0); // activate the texture unit first before binding texture
mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2); in fragment shader interpoleaza liniar intre prima si a doua textura, 
																	80% din prima, 20% a doua
stbi_set_flip_vertically_on_load(true); dai flip la imagine cand o incarci in memorie 